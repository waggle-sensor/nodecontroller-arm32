#!/usr/bin/env python3
import argparse
import json
import re
import subprocess


def read_file(path):
    with open(path) as file:
        return file.read()


def scan_subject(s):
    results = {}

    for k, v in re.findall(r'(C|ST|L|O|CN)\s*=\s*([^/,]*)', s):
        results[k] = v

    return results


def get_certfile_subject(filename):
    output = subprocess.check_output([
        'openssl',
        'x509',
        '-noout',
        '-subject',
        '-in', filename,
    ]).decode()

    return scan_subject(output)


def scan_device_id(s):
    match = re.search(r'00:1e:06:\S+', s)
    return match.group().replace(':', '').rjust(16, '0')


def get_node_id():
    return read_file('/etc/waggle/node_id').strip().lower()


def get_ep_sub_id():
    output = subprocess.check_output([
        'ssh',
        '-i', '/usr/lib/waggle/SSL/edge_processor/id_rsa_waggle_edge_processor',
        '-o', 'BatchMode=yes',
        '-o', 'ConnectTimeout=10',
        '-o', 'StrictHostKeyChecking=no',
        'edgeprocessor',
        'ip link'
    ]).decode()

    return scan_device_id(output)


def get_shovel_configs():
    node_uri = 'amqp://localhost'

    subject = get_certfile_subject('/etc/waggle/cert.pem')
    username = subject['CN']

    beehive_uri = (
        'amqps://{username}@beehive:23181'
        '?auth_mechanism=external'
        '&cacertfile=/etc/waggle/cacert.pem'
        '&certfile=/etc/waggle/cert.pem'
        '&keyfile=/etc/waggle/key.pem'
        '&verify=verify_peer'
        # '&heartbeat=60'
        '&connect_timeout=60000'
    ).format(username=username)

    node_id = get_node_id()

    shovels = {}

    # legacy pipeline
    # shovels['data'] = {
    #     'src-uri': node_uri,
    #     'src-queue': 'data',
    #     'dest-uri': beehive_uri,
    #     'dest-exchange': 'data-pipeline-in',
    #     'publish-properties': {
    #         'delivery_mode': 2,
    #         'reply_to': node_id[-12:],
    #     }
    # }
    #
    # shovels['images'] = {
    #     'src-uri': 'amqp://edgeprocessor',
    #     'src-queue': 'images',
    #     'dest-uri': beehive_uri,
    #     'dest-exchange': 'images',
    #     'publish-properties': {
    #         'delivery_mode': 2,
    #         'reply_to': node_id[-12:],
    #     }
    # }

    # new pipeline
    shovels['push-to-beehive'] = {
        'src-uri': node_uri,
        'src-queue': 'to-beehive',
        'dest-uri': beehive_uri,
        'dest-exchange': 'messages',
        'publish-properties': {
            'delivery_mode': 2,
            'user_id': username,
        }
    }

    shovels['pull-from-beehive'] = {
        'src-uri': beehive_uri,
        'src-queue': 'to-{}'.format(username),
        'dest-uri': node_uri,
        'dest-queue': 'from-beehive',
        'publish-properties': {
            'delivery_mode': 2,
        }
    }

    try:
        # TODO eventually change to just sub_id 1
        # ep_sub_id = get_ep_sub_id()
        ep_sub_id = '0000000000000001'

        shovels['forward-to-ep'] = {
            'src-uri': node_uri,
            'src-queue': 'to-plugins@{}'.format(ep_sub_id),
            'dest-uri': 'amqp://edgeprocessor',
            'dest-queue': 'to-plugins@{}'.format(ep_sub_id),
            'publish-properties': {
                'delivery_mode': 2,
            }
        }
    except subprocess.CalledProcessError:
        print('could not reach ep')

    return shovels


def start_shovels():
    for name, config in get_shovel_configs().items():
        try:
            subprocess.check_call([
                'rabbitmqctl',
                'set_parameter',
                'shovel',
                name,
                json.dumps(config),
            ])
        except subprocess.CalledProcessError:
            print('shovel', name, 'failed to start')


def stop_shovels():
    for name in get_shovel_configs().keys():
        try:
            subprocess.check_call([
                'rabbitmqctl',
                'clear_parameter',
                'shovel',
                name,
            ])
        except subprocess.CalledProcessError:
            print('shovel', name, 'failed to stop')


actions = {
    'start': start_shovels,
    'stop': stop_shovels,
}


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('action', choices=actions.keys())
    args = parser.parse_args()
    actions[args.action]()


if __name__ == '__main__':
    main()
