#!/usr/bin/env python3
import argparse
import logging
import os
import os.path
import re
import subprocess
import time
from waggle.protocol.v4.pidfile import PidFile, AlreadyRunning


logger = logging.getLogger('registration-service')
logger.setLevel(logging.INFO)

pid_file = '/var/run/waggle/communications.pid'

cert_server = 'beehive'
registration_key = '/root/id_rsa_waggle_registration'

ca_root_file = '/etc/waggle/cacert.pem'
client_key_file = '/etc/waggle/key.pem'
client_cert_file = '/etc/waggle/cert.pem'

reverse_ssh_port_file = '/etc/waggle/reverse_ssh_port'


def read_file(path):
    with open(path) as file:
        return file.read()


def write_file(path, content):
    os.makedirs(os.path.dirname(path), exist_ok=True)

    with open(path, 'w') as file:
        file.write(content)


def is_file_nonempty(path):
    try:
        return len(read_file(path)) > 0
    except FileNotFoundError:
        return False


def run_registration_command(registration_key, cert_server, command):
    return subprocess.check_output([
        'ssh',
        cert_server,
        '-p', '20022',
        '-i', registration_key,
        '-o', 'StrictHostKeyChecking=no',
        '-o', 'ConnectTimeout=60',
        command,
    ]).decode()


def make_request(command):
    logger.info('Making request %s to %s.', command, cert_server)

    start_time = time.time()

    while time.time() - start_time < 300:
        try:
            return run_registration_command(registration_key, cert_server, command)
        except subprocess.CalledProcessError:
            logger.exception('Failed to get credentials from %s. Will retry in 30s...', cert_server)
            time.sleep(30)

    raise TimeoutError('Request timed out.')


def scan_certificate(s):
    return re.search(r'-----BEGIN CERTIFICATE-----(.|\n)*-----END CERTIFICATE-----', s).group()


def scan_private_key(s):
    return re.search(r'-----BEGIN RSA PRIVATE KEY-----(.|\n)*-----END RSA PRIVATE KEY-----', s).group()


def scan_ssh_port(s):
    return int(re.search(r'PORT=(\d+)', s).group(1))


def scan_token(s):
    return int(re.search(r'TOKEN=(\d+)', s).group(1))


def scan_ssh_key(s):
    return re.search(r'ssh-rsa.*', s).group()


def request_waggleca_info():
    logger.info('Requesting waggleca info from %s.', cert_server)

    return {
        'cacert': scan_certificate(make_request('certca'))
    }


def request_node_info(node_id):
    logger.info('Requesting node info from %s.', cert_server)

    response = make_request('node?{}'.format(node_id))

    if 'cert file not found' in response:
        raise ValueError('Certificate not found for {}.'.format(node_id))

    return {
        'cert': scan_certificate(response),
        'key': scan_private_key(response),
        'ssh_port': scan_ssh_port(response),
        'ssh_key': scan_ssh_key(response),
    }


def get_certificates():
    logger.info('Getting credentials from %s.', cert_server)

    node_id = read_file('/etc/waggle/node_id').strip()

    required_files = [
        ca_root_file,
        client_key_file,
        client_cert_file,
        reverse_ssh_port_file,
    ]

    while not all(is_file_nonempty(f) for f in required_files):
        waggleca_info = request_waggleca_info()
        node_info = request_node_info(node_id)

        write_file(ca_root_file, waggleca_info['cacert'])

        write_file(client_cert_file, node_info['cert'])
        os.chmod(client_cert_file, 0o600)
        subprocess.call(['chown', 'rabbitmq:rabbitmq', client_cert_file])

        write_file(client_key_file, node_info['key'])
        os.chmod(client_key_file, 0o600)
        subprocess.call(['chown', 'rabbitmq:rabbitmq', client_key_file])

        write_file(reverse_ssh_port_file, str(node_info['ssh_port']))

    # os.remove(registration_key)

    logger.info('Switching to operation mode')
    subprocess.call('waggle-switch-to-operation-mode')


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--force', action='store_true', help='kill other processes and start')
    args = parser.parse_args()

    try:
        with PidFile(pid_file, force=args.force, name=os.path.basename(__file__)):
            get_certificates()
    except AlreadyRunning:
        logger.error('Registration already running. Please check %s', pid_file)
    except KeyboardInterrupt:
        pass


if __name__ == '__main__':
    main()
