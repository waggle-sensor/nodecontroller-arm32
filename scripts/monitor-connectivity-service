#!/usr/bin/python3
import logging
import os
import re
import socket
import subprocess
import sched


logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


# Run a command and capture it's output
def run_command(command):
    return subprocess.check_output(command).decode()


def reset_deadman_trigger():
    logging.info('resetting deadman trigger')
    with open('/tmp/alive', 'w'):
        pass


def check_USB_modem():
    output = run_command(['lsusb'])
    return re.search(r'Wireless|Realtek', output) is not None


def check_network_interface():
    output = run_command(['ifconfig'])
    addrs = re.findall(r'inet (\S+).*scope global', output)
    return len(addrs) > 0


def check_beehive_DNS():
    try:
        socket.gethostbyname('beehive')
        return True
    except Exception:
        return False


def check_beehive_ping():
    rc = os.system('curl http://beehive/api/ > /dev/null 2>&1')
    return rc == 0


def check_local_sshd():
    command = ['/usr/lib/waggle/nodecontroller/scripts/eplogin', '/usr/lib/waggle/edge_processor/nclogin', 'date > /dev/null 2>&1']
    rc = os.system(' '.join(command))
    return rc == 0


def main():
    results = {}
    scheduler = sched.scheduler()

    def update_local_results():
        results['USB Modem'] = check_USB_modem()
        results['Network Interface'] = check_network_interface()
        scheduler.enter(30, 1, update_local_results)

    def update_beehive_results():
        results['Beehive DNS'] = check_beehive_DNS()
        results['Beehive Ping'] = check_beehive_ping()
        scheduler.enter(1800, 1, update_beehive_results)

    def update_deadman_trigger():
        for name, status in results.items():
            logging.info('check - %s - %s', name, 'pass' if status else 'fail')

        if all(results.values()):
            logging.info('connectivity - pass')
            reset_deadman_trigger()
        else:
            logging.info('connectivity - fail')

        scheduler.enter(30, 0, update_deadman_trigger)

    scheduler.enter(0, 1, update_local_results)
    scheduler.enter(0, 1, update_beehive_results)
    scheduler.enter(0, 0, update_deadman_trigger)
    scheduler.run()


if __name__ == '__main__':
    main()
