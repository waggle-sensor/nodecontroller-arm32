#!/usr/bin/python3
import logging
import os
import threading
import time
import subprocess
import re


class NodeControllerShutdownThread(threading.Thread):

    def __init__(self):
        threading.Thread.__init__(self, group=None, target=None, name=None)
        self.wait_for_ep = False

    def run(self):
        logging.info("Wagman is cycling the node controller power in one minute; shutdown in 30 seconds")
        os.system("shutdown -h -k +1")
        time.sleep(30)

        while self.wait_for_ep:
            logging.info("waiting 1 second for Edge Processor to shutdown...")
            time.sleep(1)

        logging.info("node controller shutting down now")
        os.system("shutdown -h now")


class EdgeProcessorShutdownThread():

    def __init__(self, nc_stopper):
        threading.Thread.__init__(self, group=None, target=None, name=None)
        self.thread = threading.Thread(target=self.run)
        self.nc_stopper = nc_stopper

    def isAlive(self):
        return self.thread.isAlive()

    def start(self):
        self.thread.start()

    def run(self):
        self.nc_stopper.wait_for_ep = True

        logging.info("Wagman is cycling the Edge Processor power in one minute; shutdown in 30 seconds")
        os.system('timeout 15 /usr/lib/waggle/nodecontroller/scripts/eplogin shutdown -h -k +1')
        time.sleep(30)

        logging.info("Edge Processor shutting down now")
        os.system('timeout 15 /usr/lib/waggle/nodecontroller/scripts/eplogin shutdown -h now')
        self.nc_stopper.wait_for_ep = False
        time.sleep(30)

        self.thread = threading.Thread(target=self.run)


class Wagman():

    def __init__(self, nc_stopper, ep_stopper):
        self.nc_stopper = nc_stopper
        self.ep_stopper = ep_stopper

    def check_for_shutdown(self):
        output = subprocess.check_output(['journalctl', '-b', '-u', 'waggle-wagman-driver', '--since', '-30s']).decode()

        shutdown = []

        if re.search('nc stopp', output):
            logging.debug('got NC stop notification from Wagman')
            shutdown.append('nc')

        if re.search('gn stopp', output):
            logging.debug('got EP stop notification from Wagman')
            shutdown.append('ep')

        return shutdown


logging.basicConfig(level=logging.INFO)

nc_stopper = NodeControllerShutdownThread()
ep_stopper = EdgeProcessorShutdownThread(nc_stopper)

wagman = Wagman(nc_stopper, ep_stopper)

while True:
    shutdown = wagman.check_for_shutdown()

    if 'ep' in shutdown and not ep_stopper.isAlive():
        logging.info('starting ep stopper')
        ep_stopper.start()
        time.sleep(5)

    if 'nc' in shutdown and not nc_stopper.isAlive():
        logging.info('starting nc stopper')
        nc_stopper.start()
        time.sleep(5)

    time.sleep(5)
